-- File automatically generated by "cdfg2hdl".
-- Filename: checkpixel.vhd
-- Date: 12 October 2013 05:11:00 PM
-- Author: Nikolaos Kavvadias (C) 2009, 2010, 2011, 2012, 2013

library IEEE;
use WORK.operpack.all;
use WORK.mandel_cdt_pkg.all;
use WORK.std_logic_1164_tinyadditions.all;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;


entity checkpixel is
  port (
    clk : in std_logic;
    reset : in std_logic;
    start : in std_logic;
    x : in std_logic_vector(31 downto 0);
    y : in std_logic_vector(31 downto 0);
    flag : out std_logic_vector(31 downto 0);
    done : out std_logic;
    ready : out std_logic
  );
end checkpixel;

architecture fsmd of checkpixel is
  type state_type is (S_ENTRY, S_EXIT, S_001_001, S_001_002, S_001_003, S_002_001, S_002_002, S_002_003, S_002_004, S_002_005, S_002_006, S_002_007, S_002_008, S_002_009, S_003_001, S_003_002, S_003_003, S_004_001, S_004_002, S_004_003, S_005_001, S_006_001, S_006_002, S_007_001);
  signal current_state, next_state: state_type;
  signal D_1402_21_next : std_logic_vector(31 downto 0);
  signal D_1402_21_reg : std_logic_vector(31 downto 0);
  signal D_1402_21_eval : std_logic_vector(31 downto 0);
  signal D_1403_21_next : std_logic_vector(31 downto 0);
  signal D_1403_21_reg : std_logic_vector(31 downto 0);
  signal D_1403_21_eval : std_logic_vector(31 downto 0);
  signal D_1392_21_next : std_logic_vector(31 downto 0);
  signal D_1392_21_reg : std_logic_vector(31 downto 0);
  signal D_1392_21_eval : std_logic_vector(31 downto 0);
  signal D_1395_21_next : std_logic_vector(31 downto 0);
  signal D_1395_21_reg : std_logic_vector(31 downto 0);
  signal D_1395_21_eval : std_logic_vector(31 downto 0);
  signal D_1397_21_next : std_logic_vector(31 downto 0);
  signal D_1397_21_reg : std_logic_vector(31 downto 0);
  signal D_1397_21_eval : std_logic_vector(31 downto 0);
  signal temp_21_next : std_logic_vector(31 downto 0);
  signal temp_21_reg : std_logic_vector(31 downto 0);
  signal temp_21_eval : std_logic_vector(31 downto 0);
  signal D_1400_21_next : std_logic_vector(31 downto 0);
  signal D_1400_21_reg : std_logic_vector(31 downto 0);
  signal D_1400_21_eval : std_logic_vector(31 downto 0);
  signal imag_21_next : std_logic_vector(31 downto 0);
  signal imag_21_reg : std_logic_vector(31 downto 0);
  signal imag_21_eval : std_logic_vector(31 downto 0);
  signal D_1404_21_next : std_logic_vector(31 downto 0);
  signal D_1404_21_reg : std_logic_vector(31 downto 0);
  signal D_1404_21_eval : std_logic_vector(31 downto 0);
  signal iter_41_next : std_logic_vector(31 downto 0);
  signal iter_41_reg : std_logic_vector(31 downto 0);
  signal iter_41_eval : std_logic_vector(31 downto 0);
  signal D_1393_21_next : std_logic_vector(31 downto 0);
  signal D_1393_21_reg : std_logic_vector(31 downto 0);
  signal D_1393_21_eval : std_logic_vector(31 downto 0);
  signal D_1396_21_next : std_logic_vector(31 downto 0);
  signal D_1396_21_reg : std_logic_vector(31 downto 0);
  signal D_1396_21_eval : std_logic_vector(31 downto 0);
  signal D_1401_21_next : std_logic_vector(31 downto 0);
  signal D_1401_21_reg : std_logic_vector(31 downto 0);
  signal D_1401_21_eval : std_logic_vector(31 downto 0);
  signal f_11_next : std_logic_vector(31 downto 0);
  signal f_11_reg : std_logic_vector(31 downto 0);
  signal f_11_eval : std_logic_vector(31 downto 0);
  signal real_11_next : std_logic_vector(31 downto 0);
  signal real_11_reg : std_logic_vector(31 downto 0);
  signal real_11_eval : std_logic_vector(31 downto 0);
  signal f_31_next : std_logic_vector(31 downto 0);
  signal f_31_reg : std_logic_vector(31 downto 0);
  signal f_31_eval : std_logic_vector(31 downto 0);
  signal imag_11_next : std_logic_vector(31 downto 0);
  signal imag_11_reg : std_logic_vector(31 downto 0);
  signal imag_11_eval : std_logic_vector(31 downto 0);
  signal iter_11_next : std_logic_vector(31 downto 0);
  signal iter_11_reg : std_logic_vector(31 downto 0);
  signal iter_11_eval : std_logic_vector(31 downto 0);
  signal real_21_next : std_logic_vector(31 downto 0);
  signal real_21_reg : std_logic_vector(31 downto 0);
  signal real_21_eval : std_logic_vector(31 downto 0);
  signal real_next : std_logic_vector(31 downto 0);
  signal real_reg : std_logic_vector(31 downto 0);
  signal real_eval : std_logic_vector(31 downto 0);
  signal imag_next : std_logic_vector(31 downto 0);
  signal imag_reg : std_logic_vector(31 downto 0);
  signal imag_eval : std_logic_vector(31 downto 0);
  signal f_next : std_logic_vector(31 downto 0);
  signal f_reg : std_logic_vector(31 downto 0);
  signal f_eval : std_logic_vector(31 downto 0);
  signal iter_next : std_logic_vector(31 downto 0);
  signal iter_reg : std_logic_vector(31 downto 0);
  signal iter_eval : std_logic_vector(31 downto 0);
  signal D_1398_21_next : std_logic_vector(31 downto 0);
  signal D_1398_21_reg : std_logic_vector(31 downto 0);
  signal D_1398_21_eval : std_logic_vector(31 downto 0);
  signal D_1399_21_next : std_logic_vector(31 downto 0);
  signal D_1399_21_reg : std_logic_vector(31 downto 0);
  signal D_1399_21_eval : std_logic_vector(31 downto 0);
  signal D_1394_21_next : std_logic_vector(31 downto 0);
  signal D_1394_21_reg : std_logic_vector(31 downto 0);
  signal D_1394_21_eval : std_logic_vector(31 downto 0);
  signal D_1391_21_next : std_logic_vector(31 downto 0);
  signal D_1391_21_reg : std_logic_vector(31 downto 0);
  signal D_1391_21_eval : std_logic_vector(31 downto 0);
  signal flag_next : std_logic_vector(31 downto 0);
  signal flag_reg : std_logic_vector(31 downto 0);
  signal flag_eval : std_logic_vector(31 downto 0);
  constant CNST_0 : std_logic_vector(63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
  constant CNST_1 : std_logic_vector(63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
  constant CNST_1000 : std_logic_vector(63 downto 0) := "0000000000000000000000000000000000000000000000000000001111101000";
  constant CNST_2 : std_logic_vector(63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
  constant CNST_254 : std_logic_vector(63 downto 0) := "0000000000000000000000000000000000000000000000000000000011111110";
  constant CNST_500 : std_logic_vector(63 downto 0) := "0000000000000000000000000000000000000000000000000000000111110100";
  constant CNST_5000 : std_logic_vector(63 downto 0) := "0000000000000000000000000000000000000000000000000001001110001000";
  constant CNST_m1000 : std_logic_vector(63 downto 0) := "1111111111111111111111111111111111111111111111111111110000011000";
begin
  -- current state logic
  process (clk, reset)
  begin
    if (reset = '1') then
      current_state <= S_ENTRY;
      D_1402_21_reg <= (others => '0');
      D_1403_21_reg <= (others => '0');
      D_1392_21_reg <= (others => '0');
      D_1395_21_reg <= (others => '0');
      D_1397_21_reg <= (others => '0');
      temp_21_reg <= (others => '0');
      D_1400_21_reg <= (others => '0');
      imag_21_reg <= (others => '0');
      D_1404_21_reg <= (others => '0');
      iter_41_reg <= (others => '0');
      D_1393_21_reg <= (others => '0');
      D_1396_21_reg <= (others => '0');
      D_1401_21_reg <= (others => '0');
      f_11_reg <= (others => '0');
      real_11_reg <= (others => '0');
      f_31_reg <= (others => '0');
      imag_11_reg <= (others => '0');
      iter_11_reg <= (others => '0');
      real_21_reg <= (others => '0');
      real_reg <= (others => '0');
      imag_reg <= (others => '0');
      f_reg <= (others => '0');
      iter_reg <= (others => '0');
      D_1398_21_reg <= (others => '0');
      D_1399_21_reg <= (others => '0');
      D_1394_21_reg <= (others => '0');
      D_1391_21_reg <= (others => '0');
      flag_reg <= (others => '0');
    elsif (clk = '1' and clk'EVENT) then
      current_state <= next_state;
      D_1402_21_reg <= D_1402_21_next;
      D_1403_21_reg <= D_1403_21_next;
      D_1392_21_reg <= D_1392_21_next;
      D_1395_21_reg <= D_1395_21_next;
      D_1397_21_reg <= D_1397_21_next;
      temp_21_reg <= temp_21_next;
      D_1400_21_reg <= D_1400_21_next;
      imag_21_reg <= imag_21_next;
      D_1404_21_reg <= D_1404_21_next;
      iter_41_reg <= iter_41_next;
      D_1393_21_reg <= D_1393_21_next;
      D_1396_21_reg <= D_1396_21_next;
      D_1401_21_reg <= D_1401_21_next;
      f_11_reg <= f_11_next;
      real_11_reg <= real_11_next;
      f_31_reg <= f_31_next;
      imag_11_reg <= imag_11_next;
      iter_11_reg <= iter_11_next;
      real_21_reg <= real_21_next;
      real_reg <= real_next;
      imag_reg <= imag_next;
      f_reg <= f_next;
      iter_reg <= iter_next;
      D_1398_21_reg <= D_1398_21_next;
      D_1399_21_reg <= D_1399_21_next;
      D_1394_21_reg <= D_1394_21_next;
      D_1391_21_reg <= D_1391_21_next;
      flag_reg <= flag_next;
    end if;
  end process;

  -- next state and output logic
  process (current_state, start,
    x,
    y,
    flag_reg,
    D_1402_21_reg, D_1402_21_next,
    D_1403_21_reg, D_1403_21_next,
    D_1392_21_reg, D_1392_21_next,
    D_1395_21_reg, D_1395_21_next,
    D_1397_21_reg, D_1397_21_next,
    temp_21_reg, temp_21_next,
    D_1400_21_reg, D_1400_21_next,
    imag_21_reg, imag_21_next,
    D_1404_21_reg, D_1404_21_next,
    iter_41_reg, iter_41_next,
    D_1393_21_reg, D_1393_21_next,
    D_1396_21_reg, D_1396_21_next,
    D_1401_21_reg, D_1401_21_next,
    f_11_reg, f_11_next,
    real_11_reg, real_11_next,
    f_31_reg, f_31_next,
    imag_11_reg, imag_11_next,
    iter_11_reg, iter_11_next,
    real_21_reg, real_21_next,
    real_reg, real_next,
    imag_reg, imag_next,
    f_reg, f_next,
    iter_reg, iter_next,
    D_1398_21_reg, D_1398_21_next,
    D_1399_21_reg, D_1399_21_next,
    D_1394_21_reg, D_1394_21_next,
    D_1391_21_reg, D_1391_21_next
  )
  begin
    done <= '0';
    ready <= '0';
    D_1402_21_next <= D_1402_21_reg;
    D_1403_21_next <= D_1403_21_reg;
    D_1392_21_next <= D_1392_21_reg;
    D_1395_21_next <= D_1395_21_reg;
    D_1397_21_next <= D_1397_21_reg;
    temp_21_next <= temp_21_reg;
    D_1400_21_next <= D_1400_21_reg;
    imag_21_next <= imag_21_reg;
    D_1404_21_next <= D_1404_21_reg;
    iter_41_next <= iter_41_reg;
    D_1393_21_next <= D_1393_21_reg;
    D_1396_21_next <= D_1396_21_reg;
    D_1401_21_next <= D_1401_21_reg;
    f_11_next <= f_11_reg;
    real_11_next <= real_11_reg;
    f_31_next <= f_31_reg;
    imag_11_next <= imag_11_reg;
    iter_11_next <= iter_11_reg;
    real_21_next <= real_21_reg;
    real_next <= real_reg;
    imag_next <= imag_reg;
    f_next <= f_reg;
    iter_next <= iter_reg;
    D_1398_21_next <= D_1398_21_reg;
    D_1399_21_next <= D_1399_21_reg;
    D_1394_21_next <= D_1394_21_reg;
    D_1391_21_next <= D_1391_21_reg;
    flag_next <= flag_reg;
    case current_state is
      when S_ENTRY =>
        ready <= '1';
        if (start = '1') then
          next_state <= S_001_001;
        else
          next_state <= S_ENTRY;
        end if;
      when S_001_001 =>
        f_11_next <= CNST_1(31 downto 0);
        real_11_next <= CNST_0(31 downto 0);
        imag_11_next <= CNST_0(31 downto 0);
        iter_11_next <= CNST_0(31 downto 0);
        real_next <= real_11_next (31 downto 0);
        imag_next <= imag_11_next (31 downto 0);
        iter_next <= iter_11_next (31 downto 0);
        f_next <= f_11_next (31 downto 0);
        next_state <= S_005_001;
      when S_002_001 =>
        D_1398_21_next <= mul(real_reg, CNST_2(31 downto 0), '1', 32);
        D_1394_21_next <= mul(imag_reg, imag_reg(31 downto 0), '1', 32);
        D_1391_21_next <= mul(real_reg, real_reg(31 downto 0), '1', 32);
        D_1392_21_next <= std_logic_vector(signed(D_1391_21_next ) + signed(CNST_500(31 downto 0)));
        D_1395_21_next <= std_logic_vector(signed(D_1394_21_next ) + signed(CNST_500(31 downto 0)));
        D_1399_21_next <= mul(D_1398_21_next , imag_reg(31 downto 0), '1', 32);
        D_1400_21_next <= std_logic_vector(signed(D_1399_21_next ) + signed(CNST_500(31 downto 0)));
        divq(D_1392_21_next , CNST_1000(31 downto 0), '1', D_1393_21_next);
        divq(D_1395_21_next , CNST_m1000(31 downto 0), '1', D_1396_21_next);
        D_1397_21_next <= std_logic_vector(signed(D_1393_21_next ) + signed(D_1396_21_next (31 downto 0)));
        divq(D_1400_21_next , CNST_1000(31 downto 0), '1', D_1401_21_next);
        temp_21_next <= std_logic_vector(signed(D_1397_21_next ) + signed(x(31 downto 0)));
        imag_21_next <= std_logic_vector(signed(D_1401_21_next ) + signed(y(31 downto 0)));
        if (imag_21_next (31) = '1') then
          D_1403_21_next <= std_logic_vector(not(unsigned(imag_21_next (31 downto 0))) + unsigned(ONE));
        else
          D_1403_21_next <= imag_21_next (31 downto 0);
        end if;
        real_21_next <= temp_21_next (31 downto 0);
        imag_next <= imag_21_next (31 downto 0);
        if (real_21_next (31) = '1') then
          D_1402_21_next <= std_logic_vector(not(unsigned(real_21_next (31 downto 0))) + unsigned(ONE));
        else
          D_1402_21_next <= real_21_next (31 downto 0);
        end if;
        real_next <= real_21_next (31 downto 0);
        D_1404_21_next <= std_logic_vector(signed(D_1402_21_next ) + signed(D_1403_21_next (31 downto 0)));
        if (signed(D_1404_21_next ) > signed(CNST_5000(31 downto 0))) then
          next_state <= S_003_001;
        else
          next_state <= S_004_001;
        end if;
      when S_003_001 =>
        f_31_next <= CNST_0(31 downto 0);
        f_next <= f_31_next (31 downto 0);
        next_state <= S_006_001;
      when S_004_001 =>
        iter_41_next <= std_logic_vector(signed(iter_reg) + signed(CNST_1(31 downto 0)));
        iter_next <= iter_41_next (31 downto 0);
        next_state <= S_005_001; --
      when S_005_001 =>        --
        if (signed(iter_reg) <= signed(CNST_254(31 downto 0))) then
          next_state <= S_002_001;
        else
          next_state <= S_006_001;
        end if;
      when S_006_001 =>
        flag_next <= f_reg(31 downto 0);
        next_state <= S_007_001; --
      when S_007_001 =>        --
        next_state <= S_EXIT; --
      when S_EXIT =>        --
        done <= '1';
        next_state <= S_ENTRY;
      when others =>
        next_state <= S_ENTRY;
    end case;
  end process;

  flag <= flag_reg;

end fsmd;
