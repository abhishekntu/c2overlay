-- File automatically generated by "cdfg2hdl".
-- Filename: sierpinski.vhd
-- Date: 12 October 2013 02:00:25 PM
-- Author: Nikolaos Kavvadias (C) 2009, 2010, 2011, 2012, 2013

library IEEE;
use WORK.operpack.all;
use WORK.sierpinski_cdt_pkg.all;
use WORK.std_logic_1164_tinyadditions.all;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;


entity sierpinski is
  port (
    clk : in std_logic;
    reset : in std_logic;
    start : in std_logic;
    tot : out std_logic_vector(31 downto 0);
    done : out std_logic;
    ready : out std_logic
  );
end sierpinski;

architecture fsmd of sierpinski is
  type state_type is (S_ENTRY, S_EXIT, S_001_001, S_001_002, S_001_003, S_002_001, S_003_001, S_003_002, S_003_003, S_004_001, S_004_002, S_004_003, S_005_001, S_005_002, S_005_003, S_006_001, S_006_002, S_006_003, S_006_004, S_007_001, S_007_002, S_007_003, S_008_001, S_008_002, S_008_003, S_009_001, S_010_001, S_010_002, S_011_001);
  signal current_state, next_state: state_type;
  signal D_1379_61_next : std_logic_vector(31 downto 0);
  signal D_1379_61_reg : std_logic_vector(31 downto 0);
  signal D_1379_61_eval : std_logic_vector(31 downto 0);
  signal sum_61_next : std_logic_vector(31 downto 0);
  signal sum_61_reg : std_logic_vector(31 downto 0);
  signal sum_61_eval : std_logic_vector(31 downto 0);
  signal col_71_next : std_logic_vector(31 downto 0);
  signal col_71_reg : std_logic_vector(31 downto 0);
  signal col_71_eval : std_logic_vector(31 downto 0);
  signal row_81_next : std_logic_vector(31 downto 0);
  signal row_81_reg : std_logic_vector(31 downto 0);
  signal row_81_eval : std_logic_vector(31 downto 0);
  signal D_1374_31_next : std_logic_vector(31 downto 0);
  signal D_1374_31_reg : std_logic_vector(31 downto 0);
  signal D_1374_31_eval : std_logic_vector(31 downto 0);
  signal sum_11_next : std_logic_vector(31 downto 0);
  signal sum_11_reg : std_logic_vector(31 downto 0);
  signal sum_11_eval : std_logic_vector(31 downto 0);
  signal iftmp_0_41_next : std_logic_vector(31 downto 0);
  signal iftmp_0_41_reg : std_logic_vector(31 downto 0);
  signal iftmp_0_41_eval : std_logic_vector(31 downto 0);
  signal iftmp_0_51_next : std_logic_vector(31 downto 0);
  signal iftmp_0_51_reg : std_logic_vector(31 downto 0);
  signal iftmp_0_51_eval : std_logic_vector(31 downto 0);
  signal col_11_next : std_logic_vector(31 downto 0);
  signal col_11_reg : std_logic_vector(31 downto 0);
  signal col_11_eval : std_logic_vector(31 downto 0);
  signal col_81_next : std_logic_vector(31 downto 0);
  signal col_81_reg : std_logic_vector(31 downto 0);
  signal col_81_eval : std_logic_vector(31 downto 0);
  signal row_11_next : std_logic_vector(31 downto 0);
  signal row_11_reg : std_logic_vector(31 downto 0);
  signal row_11_eval : std_logic_vector(31 downto 0);
  signal iftmp_0_next : std_logic_vector(31 downto 0);
  signal iftmp_0_reg : std_logic_vector(31 downto 0);
  signal iftmp_0_eval : std_logic_vector(31 downto 0);
  signal temp_61_next : std_logic_vector(31 downto 0);
  signal temp_61_reg : std_logic_vector(31 downto 0);
  signal temp_61_eval : std_logic_vector(31 downto 0);
  signal sum_next : std_logic_vector(31 downto 0);
  signal sum_reg : std_logic_vector(31 downto 0);
  signal sum_eval : std_logic_vector(31 downto 0);
  signal col_next : std_logic_vector(31 downto 0);
  signal col_reg : std_logic_vector(31 downto 0);
  signal col_eval : std_logic_vector(31 downto 0);
  signal row_next : std_logic_vector(31 downto 0);
  signal row_reg : std_logic_vector(31 downto 0);
  signal row_eval : std_logic_vector(31 downto 0);
  signal D_1378_61_next : std_logic_vector(31 downto 0);
  signal D_1378_61_reg : std_logic_vector(31 downto 0);
  signal D_1378_61_eval : std_logic_vector(31 downto 0);
  signal D_1373_31_next : std_logic_vector(31 downto 0);
  signal D_1373_31_reg : std_logic_vector(31 downto 0);
  signal D_1373_31_eval : std_logic_vector(31 downto 0);
  signal table_next : table_type;
  signal table_reg : table_type;
  signal table_eval : table_type;
  signal tot_next : std_logic_vector(31 downto 0);
  signal tot_reg : std_logic_vector(31 downto 0);
  signal tot_eval : std_logic_vector(31 downto 0);
  constant CNST_0 : std_logic_vector(63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
  constant CNST_1 : std_logic_vector(63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
  constant CNST_31 : std_logic_vector(63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011111";
  constant CNST_32 : std_logic_vector(63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000";
  constant CNST_46 : std_logic_vector(63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101110";
  constant CNST_64 : std_logic_vector(63 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000";
begin
  -- current state logic
  process (clk, reset)
  begin
    if (reset = '1') then
      current_state <= S_ENTRY;
      D_1379_61_reg <= (others => '0');
      sum_61_reg <= (others => '0');
      col_71_reg <= (others => '0');
      row_81_reg <= (others => '0');
      D_1374_31_reg <= (others => '0');
      sum_11_reg <= (others => '0');
      iftmp_0_41_reg <= (others => '0');
      iftmp_0_51_reg <= (others => '0');
      col_11_reg <= (others => '0');
      col_81_reg <= (others => '0');
      row_11_reg <= (others => '0');
      iftmp_0_reg <= (others => '0');
      temp_61_reg <= (others => '0');
      sum_reg <= (others => '0');
      col_reg <= (others => '0');
      row_reg <= (others => '0');
      D_1378_61_reg <= (others => '0');
      D_1373_31_reg <= (others => '0');
      table_reg <= (others => (others => '0'));
      tot_reg <= (others => '0');
    elsif (clk = '1' and clk'EVENT) then
      current_state <= next_state;
      D_1379_61_reg <= D_1379_61_next;
      sum_61_reg <= sum_61_next;
      col_71_reg <= col_71_next;
      row_81_reg <= row_81_next;
      D_1374_31_reg <= D_1374_31_next;
      sum_11_reg <= sum_11_next;
      iftmp_0_41_reg <= iftmp_0_41_next;
      iftmp_0_51_reg <= iftmp_0_51_next;
      col_11_reg <= col_11_next;
      col_81_reg <= col_81_next;
      row_11_reg <= row_11_next;
      iftmp_0_reg <= iftmp_0_next;
      temp_61_reg <= temp_61_next;
      sum_reg <= sum_next;
      col_reg <= col_next;
      row_reg <= row_next;
      D_1378_61_reg <= D_1378_61_next;
      D_1373_31_reg <= D_1373_31_next;
      table_reg <= table_next;
      tot_reg <= tot_next;
    end if;
  end process;

  -- next state and output logic
  process (current_state, start,
    tot_reg,
    D_1379_61_reg, D_1379_61_next,
    sum_61_reg, sum_61_next,
    col_71_reg, col_71_next,
    row_81_reg, row_81_next,
    D_1374_31_reg, D_1374_31_next,
    sum_11_reg, sum_11_next,
    iftmp_0_41_reg, iftmp_0_41_next,
    iftmp_0_51_reg, iftmp_0_51_next,
    col_11_reg, col_11_next,
    col_81_reg, col_81_next,
    row_11_reg, row_11_next,
    iftmp_0_reg, iftmp_0_next,
    temp_61_reg, temp_61_next,
    sum_reg, sum_next,
    col_reg, col_next,
    row_reg, row_next,
    D_1378_61_reg, D_1378_61_next,
    D_1373_31_reg, D_1373_31_next,
    table_reg, table_next
  )
  begin
    done <= '0';
    ready <= '0';
    D_1379_61_next <= D_1379_61_reg;
    sum_61_next <= sum_61_reg;
    col_71_next <= col_71_reg;
    row_81_next <= row_81_reg;
    D_1374_31_next <= D_1374_31_reg;
    sum_11_next <= sum_11_reg;
    iftmp_0_41_next <= iftmp_0_41_reg;
    iftmp_0_51_next <= iftmp_0_51_reg;
    col_11_next <= col_11_reg;
    col_81_next <= col_81_reg;
    row_11_next <= row_11_reg;
    iftmp_0_next <= iftmp_0_reg;
    temp_61_next <= temp_61_reg;
    sum_next <= sum_reg;
    col_next <= col_reg;
    row_next <= row_reg;
    D_1378_61_next <= D_1378_61_reg;
    D_1373_31_next <= D_1373_31_reg;
    table_next <= table_reg;
    tot_next <= tot_reg;
    case current_state is
      when S_ENTRY =>
        ready <= '1';
        if (start = '1') then
          next_state <= S_001_001;
        else
          next_state <= S_ENTRY;
        end if;
      when S_001_001 =>
        sum_11_next <= CNST_0(31 downto 0);
        col_11_next <= CNST_0(31 downto 0);
        row_11_next <= CNST_0(31 downto 0);
        col_next <= col_11_next (31 downto 0);
        row_next <= row_11_next (31 downto 0);
        sum_next <= sum_11_next (31 downto 0);
        next_state <= S_002_001; --
      when S_002_001 =>        --
        if (signed(col_reg) >= signed(row_reg(31 downto 0))) then
          next_state <= S_003_001;
        else
          next_state <= S_007_001;
        end if;
      when S_003_001 =>
        D_1373_31_next <= not (col_reg(31 downto 0));
        D_1374_31_next <= D_1373_31_next  and row_reg(31 downto 0);
        if (signed(D_1374_31_next ) /= signed(CNST_0(31 downto 0))) then
          next_state <= S_004_001;
        else
          next_state <= S_005_001;
        end if;
      when S_004_001 =>
        iftmp_0_41_next <= CNST_46(31 downto 0);
        iftmp_0_next <= iftmp_0_41_next (31 downto 0);
        next_state <= S_006_001;
      when S_005_001 =>
        iftmp_0_51_next <= CNST_64(31 downto 0);
        iftmp_0_next <= iftmp_0_51_next (31 downto 0);
        next_state <= S_006_001; --
      when S_006_001 =>        --
        temp_61_next <= iftmp_0_reg(31 downto 0);
        D_1378_61_next <= mul(row_reg, CNST_32(31 downto 0), '1', 32);
        D_1379_61_next <= std_logic_vector(signed(D_1378_61_next ) + signed(col_reg(31 downto 0)));
        sum_61_next <= std_logic_vector(signed(sum_reg) + signed(temp_61_next (31 downto 0)));
        sum_next <= sum_61_next (31 downto 0);
        table_next(to_integer(unsigned(D_1379_61_next (9 downto 0)))) <= temp_61_next (31 downto 0);
        next_state <= S_007_001; --
      when S_007_001 =>        --
        col_71_next <= std_logic_vector(signed(col_reg) + signed(CNST_1(31 downto 0)));
        col_next <= col_71_next (31 downto 0);
        if (signed(col_71_next ) > signed(CNST_31(31 downto 0))) then
          next_state <= S_008_001;
        else
          next_state <= S_009_001;
        end if;
      when S_008_001 =>
        row_81_next <= std_logic_vector(signed(row_reg) + signed(CNST_1(31 downto 0)));
        col_81_next <= CNST_0(31 downto 0);
        col_next <= col_81_next (31 downto 0);
        row_next <= row_81_next (31 downto 0);
        next_state <= S_009_001; --
      when S_009_001 =>        --
        if (signed(row_reg) /= signed(CNST_32(31 downto 0))) then
          next_state <= S_002_001;
        else
          next_state <= S_010_001;
        end if;
      when S_010_001 =>
        tot_next <= sum_reg(31 downto 0);
        next_state <= S_011_001; --
      when S_011_001 =>        --
        next_state <= S_EXIT; --
      when S_EXIT =>        --
        done <= '1';
        next_state <= S_ENTRY;
      when others =>
        next_state <= S_ENTRY;
    end case;
  end process;

  tot <= tot_reg;

end fsmd;
