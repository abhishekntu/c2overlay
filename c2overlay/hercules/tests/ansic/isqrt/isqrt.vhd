-- File automatically generated by "cdfg2hdl".
-- Filename: isqrt.vhd
-- Date: 12 October 2013 04:29:50 PM
-- Author: Nikolaos Kavvadias (C) 2009, 2010, 2011, 2012, 2013

library IEEE;
use WORK.operpack.all;
use WORK.isqrt_cdt_pkg.all;
use WORK.std_logic_1164_tinyadditions.all;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;


entity isqrt is
  port (
    clk : in std_logic;
    reset : in std_logic;
    start : in std_logic;
    x : in std_logic_vector(31 downto 0);
    outp : out std_logic_vector(31 downto 0);
    done : out std_logic;
    ready : out std_logic
  );
end isqrt;

architecture fsmd of isqrt is
  type state_type is (S_ENTRY, S_EXIT, S_001_001, S_001_002, S_001_003, S_002_001, S_002_002, S_002_003, S_003_001, S_003_002, S_003_003, S_004_001, S_004_002, S_004_003, S_005_001, S_006_001, S_006_002, S_007_001);
  signal current_state, next_state: state_type;
  signal y_31_next : std_logic_vector(31 downto 0);
  signal y_31_reg : std_logic_vector(31 downto 0);
  signal y_31_eval : std_logic_vector(31 downto 0);
  signal b_21_next : std_logic_vector(31 downto 0);
  signal b_21_reg : std_logic_vector(31 downto 0);
  signal b_21_eval : std_logic_vector(31 downto 0);
  signal m_11_next : std_logic_vector(31 downto 0);
  signal m_11_reg : std_logic_vector(31 downto 0);
  signal m_11_eval : std_logic_vector(31 downto 0);
  signal y_11_next : std_logic_vector(31 downto 0);
  signal y_11_reg : std_logic_vector(31 downto 0);
  signal y_11_eval : std_logic_vector(31 downto 0);
  signal b_next : std_logic_vector(31 downto 0);
  signal b_reg : std_logic_vector(31 downto 0);
  signal b_eval : std_logic_vector(31 downto 0);
  signal y_next : std_logic_vector(31 downto 0);
  signal y_reg : std_logic_vector(31 downto 0);
  signal y_eval : std_logic_vector(31 downto 0);
  signal x0_next : std_logic_vector(31 downto 0);
  signal x0_reg : std_logic_vector(31 downto 0);
  signal x0_eval : std_logic_vector(31 downto 0);
  signal m_next : std_logic_vector(31 downto 0);
  signal m_reg : std_logic_vector(31 downto 0);
  signal m_eval : std_logic_vector(31 downto 0);
  signal x0_11_next : std_logic_vector(31 downto 0);
  signal x0_11_reg : std_logic_vector(31 downto 0);
  signal x0_11_eval : std_logic_vector(31 downto 0);
  signal m_41_next : std_logic_vector(31 downto 0);
  signal m_41_reg : std_logic_vector(31 downto 0);
  signal m_41_eval : std_logic_vector(31 downto 0);
  signal y_21_next : std_logic_vector(31 downto 0);
  signal y_21_reg : std_logic_vector(31 downto 0);
  signal y_21_eval : std_logic_vector(31 downto 0);
  signal x0_31_next : std_logic_vector(31 downto 0);
  signal x0_31_reg : std_logic_vector(31 downto 0);
  signal x0_31_eval : std_logic_vector(31 downto 0);
  signal outp_next : std_logic_vector(31 downto 0);
  signal outp_reg : std_logic_vector(31 downto 0);
  signal outp_eval : std_logic_vector(31 downto 0);
  constant CNST_0 : std_logic_vector(63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
  constant CNST_1 : std_logic_vector(63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
  constant CNST_1073741824 : std_logic_vector(63 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000";
  constant CNST_2 : std_logic_vector(63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
begin
  -- current state logic
  process (clk, reset)
  begin
    if (reset = '1') then
      current_state <= S_ENTRY;
      y_31_reg <= (others => '0');
      b_21_reg <= (others => '0');
      m_11_reg <= (others => '0');
      y_11_reg <= (others => '0');
      b_reg <= (others => '0');
      y_reg <= (others => '0');
      x0_reg <= (others => '0');
      m_reg <= (others => '0');
      x0_11_reg <= (others => '0');
      m_41_reg <= (others => '0');
      y_21_reg <= (others => '0');
      x0_31_reg <= (others => '0');
      outp_reg <= (others => '0');
    elsif (clk = '1' and clk'EVENT) then
      current_state <= next_state;
      y_31_reg <= y_31_next;
      b_21_reg <= b_21_next;
      m_11_reg <= m_11_next;
      y_11_reg <= y_11_next;
      b_reg <= b_next;
      y_reg <= y_next;
      x0_reg <= x0_next;
      m_reg <= m_next;
      x0_11_reg <= x0_11_next;
      m_41_reg <= m_41_next;
      y_21_reg <= y_21_next;
      x0_31_reg <= x0_31_next;
      outp_reg <= outp_next;
    end if;
  end process;

  -- next state and output logic
  process (current_state, start,
    x,
    outp_reg,
    y_31_reg, y_31_next,
    b_21_reg, b_21_next,
    m_11_reg, m_11_next,
    y_11_reg, y_11_next,
    b_reg, b_next,
    y_reg, y_next,
    x0_reg, x0_next,
    m_reg, m_next,
    x0_11_reg, x0_11_next,
    m_41_reg, m_41_next,
    y_21_reg, y_21_next,
    x0_31_reg, x0_31_next
  )
  begin
    done <= '0';
    ready <= '0';
    y_31_next <= y_31_reg;
    b_21_next <= b_21_reg;
    m_11_next <= m_11_reg;
    y_11_next <= y_11_reg;
    b_next <= b_reg;
    y_next <= y_reg;
    x0_next <= x0_reg;
    m_next <= m_reg;
    x0_11_next <= x0_11_reg;
    m_41_next <= m_41_reg;
    y_21_next <= y_21_reg;
    x0_31_next <= x0_31_reg;
    outp_next <= outp_reg;
    case current_state is
      when S_ENTRY =>
        ready <= '1';
        if (start = '1') then
          next_state <= S_001_001;
        else
          next_state <= S_ENTRY;
        end if;
      when S_001_001 =>
        m_11_next <= CNST_1073741824(31 downto 0);
        y_11_next <= CNST_0(31 downto 0);
        x0_11_next <= x(31 downto 0);
        m_next <= m_11_next (31 downto 0);
        y_next <= y_11_next (31 downto 0);
        x0_next <= x0_11_next (31 downto 0);
        next_state <= S_005_001;
      when S_002_001 =>
        b_21_next <= y_reg or m_reg(31 downto 0);
        y_21_next <= "0" & y_reg(31 downto 1);
        b_next <= b_21_next (31 downto 0);
        y_next <= y_21_next (31 downto 0);
        if (x0_reg >= b_21_next (31 downto 0)) then
          next_state <= S_003_001;
        else
          next_state <= S_004_001;
        end if;
      when S_003_001 =>
        y_31_next <= y_reg or m_reg(31 downto 0);
        x0_31_next <= std_logic_vector(unsigned(x0_reg) - unsigned(b_reg(31 downto 0)));
        y_next <= y_31_next (31 downto 0);
        x0_next <= x0_31_next (31 downto 0);
        next_state <= S_004_001; --
      when S_004_001 =>        --
        m_41_next <= "00" & m_reg(31 downto 2);
        m_next <= m_41_next (31 downto 0);
        next_state <= S_005_001; --
      when S_005_001 =>        --
        if (m_reg /= CNST_0(31 downto 0)) then
          next_state <= S_002_001;
        else
          next_state <= S_006_001;
        end if;
      when S_006_001 =>
        outp_next <= y_reg(31 downto 0);
        next_state <= S_007_001; --
      when S_007_001 =>        --
        next_state <= S_EXIT; --
      when S_EXIT =>        --
        done <= '1';
        next_state <= S_ENTRY;
      when others =>
        next_state <= S_ENTRY;
    end case;
  end process;

  outp <= outp_reg;

end fsmd;
