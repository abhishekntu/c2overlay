-- File automatically generated by "cdfg2hdl".
-- Filename: bitrev.vhd
-- Date: 12 October 2013 12:34:16 PM
-- Author: Nikolaos Kavvadias (C) 2009, 2010, 2011, 2012, 2013

library IEEE;
use WORK.operpack.all;
use WORK.bitrev_cdt_pkg.all;
use WORK.std_logic_1164_tinyadditions.all;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;


entity bitrev is
  port (
    clk : in std_logic;
    reset : in std_logic;
    start : in std_logic;
    inp : in std_logic_vector(7 downto 0);
    D_1377 : out std_logic_vector(7 downto 0);
    done : out std_logic;
    ready : out std_logic
  );
end bitrev;

architecture fsmd of bitrev is
  type state_type is (S_ENTRY, S_EXIT, S_001_001, S_001_002, S_001_003, S_002_001, S_002_002, S_002_003, S_002_004, S_002_005, S_002_006, S_002_007, S_002_008, S_002_009, S_003_001, S_004_001);
  signal current_state, next_state: state_type;
  signal i_21_next : std_logic_vector(7 downto 0);
  signal i_21_reg : std_logic_vector(7 downto 0);
  signal i_21_eval : std_logic_vector(7 downto 0);
  signal D_1371_21_next : std_logic_vector(31 downto 0);
  signal D_1371_21_reg : std_logic_vector(31 downto 0);
  signal D_1371_21_eval : std_logic_vector(31 downto 0);
  signal D_1376_21_next : std_logic_vector(7 downto 0);
  signal D_1376_21_reg : std_logic_vector(7 downto 0);
  signal D_1376_21_eval : std_logic_vector(7 downto 0);
  signal temp_11_next : std_logic_vector(7 downto 0);
  signal temp_11_reg : std_logic_vector(7 downto 0);
  signal temp_11_eval : std_logic_vector(7 downto 0);
  signal D_1372_21_next : std_logic_vector(31 downto 0);
  signal D_1372_21_reg : std_logic_vector(31 downto 0);
  signal D_1372_21_eval : std_logic_vector(31 downto 0);
  signal i_11_next : std_logic_vector(7 downto 0);
  signal i_11_reg : std_logic_vector(7 downto 0);
  signal i_11_eval : std_logic_vector(7 downto 0);
  signal i_next : std_logic_vector(7 downto 0);
  signal i_reg : std_logic_vector(7 downto 0);
  signal i_eval : std_logic_vector(7 downto 0);
  signal temp_next : std_logic_vector(7 downto 0);
  signal temp_reg : std_logic_vector(7 downto 0);
  signal temp_eval : std_logic_vector(7 downto 0);
  signal D_1373_21_next : std_logic_vector(31 downto 0);
  signal D_1373_21_reg : std_logic_vector(31 downto 0);
  signal D_1373_21_eval : std_logic_vector(31 downto 0);
  signal D_1370_21_next : std_logic_vector(31 downto 0);
  signal D_1370_21_reg : std_logic_vector(31 downto 0);
  signal D_1370_21_eval : std_logic_vector(31 downto 0);
  signal D_1372_22_next : std_logic_vector(31 downto 0);
  signal D_1372_22_reg : std_logic_vector(31 downto 0);
  signal D_1372_22_eval : std_logic_vector(31 downto 0);
  signal temp_0_21_next : std_logic_vector(7 downto 0);
  signal temp_0_21_reg : std_logic_vector(7 downto 0);
  signal temp_0_21_eval : std_logic_vector(7 downto 0);
  signal D_1368_21_next : std_logic_vector(31 downto 0);
  signal D_1368_21_reg : std_logic_vector(31 downto 0);
  signal D_1368_21_eval : std_logic_vector(31 downto 0);
  signal D_1369_21_next : std_logic_vector(31 downto 0);
  signal D_1369_21_reg : std_logic_vector(31 downto 0);
  signal D_1369_21_eval : std_logic_vector(31 downto 0);
  signal D_1369_22_next : std_logic_vector(31 downto 0);
  signal D_1369_22_reg : std_logic_vector(31 downto 0);
  signal D_1369_22_eval : std_logic_vector(31 downto 0);
  signal D_1374_21_next : std_logic_vector(7 downto 0);
  signal D_1374_21_reg : std_logic_vector(7 downto 0);
  signal D_1374_21_eval : std_logic_vector(7 downto 0);
  signal temp_21_next : std_logic_vector(7 downto 0);
  signal temp_21_reg : std_logic_vector(7 downto 0);
  signal temp_21_eval : std_logic_vector(7 downto 0);
  signal D_1377_next : std_logic_vector(7 downto 0);
  signal D_1377_reg : std_logic_vector(7 downto 0);
  signal D_1377_eval : std_logic_vector(7 downto 0);
  constant CNST_0 : std_logic_vector(63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
  constant CNST_1 : std_logic_vector(63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
  constant CNST_7 : std_logic_vector(63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
begin
  -- current state logic
  process (clk, reset)
  begin
    if (reset = '1') then
      current_state <= S_ENTRY;
      i_21_reg <= (others => '0');
      D_1371_21_reg <= (others => '0');
      D_1376_21_reg <= (others => '0');
      temp_11_reg <= (others => '0');
      D_1372_21_reg <= (others => '0');
      i_11_reg <= (others => '0');
      i_reg <= (others => '0');
      temp_reg <= (others => '0');
      D_1373_21_reg <= (others => '0');
      D_1370_21_reg <= (others => '0');
      D_1372_22_reg <= (others => '0');
      temp_0_21_reg <= (others => '0');
      D_1368_21_reg <= (others => '0');
      D_1369_21_reg <= (others => '0');
      D_1369_22_reg <= (others => '0');
      D_1374_21_reg <= (others => '0');
      temp_21_reg <= (others => '0');
      D_1377_reg <= (others => '0');
    elsif (clk = '1' and clk'EVENT) then
      current_state <= next_state;
      i_21_reg <= i_21_next;
      D_1371_21_reg <= D_1371_21_next;
      D_1376_21_reg <= D_1376_21_next;
      temp_11_reg <= temp_11_next;
      D_1372_21_reg <= D_1372_21_next;
      i_11_reg <= i_11_next;
      i_reg <= i_next;
      temp_reg <= temp_next;
      D_1373_21_reg <= D_1373_21_next;
      D_1370_21_reg <= D_1370_21_next;
      D_1372_22_reg <= D_1372_22_next;
      temp_0_21_reg <= temp_0_21_next;
      D_1368_21_reg <= D_1368_21_next;
      D_1369_21_reg <= D_1369_21_next;
      D_1369_22_reg <= D_1369_22_next;
      D_1374_21_reg <= D_1374_21_next;
      temp_21_reg <= temp_21_next;
      D_1377_reg <= D_1377_next;
    end if;
  end process;

  -- next state and output logic
  process (current_state, start,
    inp,
    D_1377_reg,
    i_21_reg, i_21_next,
    D_1371_21_reg, D_1371_21_next,
    D_1376_21_reg, D_1376_21_next,
    temp_11_reg, temp_11_next,
    D_1372_21_reg, D_1372_21_next,
    i_11_reg, i_11_next,
    i_reg, i_next,
    temp_reg, temp_next,
    D_1373_21_reg, D_1373_21_next,
    D_1370_21_reg, D_1370_21_next,
    D_1372_22_reg, D_1372_22_next,
    temp_0_21_reg, temp_0_21_next,
    D_1368_21_reg, D_1368_21_next,
    D_1369_21_reg, D_1369_21_next,
    D_1369_22_reg, D_1369_22_next,
    D_1374_21_reg, D_1374_21_next,
    temp_21_reg, temp_21_next
  )
  begin
    done <= '0';
    ready <= '0';
    i_21_next <= i_21_reg;
    D_1371_21_next <= D_1371_21_reg;
    D_1376_21_next <= D_1376_21_reg;
    temp_11_next <= temp_11_reg;
    D_1372_21_next <= D_1372_21_reg;
    i_11_next <= i_11_reg;
    i_next <= i_reg;
    temp_next <= temp_reg;
    D_1373_21_next <= D_1373_21_reg;
    D_1370_21_next <= D_1370_21_reg;
    D_1372_22_next <= D_1372_22_reg;
    temp_0_21_next <= temp_0_21_reg;
    D_1368_21_next <= D_1368_21_reg;
    D_1369_21_next <= D_1369_21_reg;
    D_1369_22_next <= D_1369_22_reg;
    D_1374_21_next <= D_1374_21_reg;
    temp_21_next <= temp_21_reg;
    D_1377_next <= D_1377_reg;
    case current_state is
      when S_ENTRY =>
        ready <= '1';
        if (start = '1') then
          next_state <= S_001_001;
        else
          next_state <= S_ENTRY;
        end if;
      when S_001_001 =>
        temp_11_next <= CNST_0(7 downto 0);
        i_11_next <= CNST_0(7 downto 0);
        i_next <= i_11_next (7 downto 0);
        temp_next <= temp_11_next (7 downto 0);
        next_state <= S_003_001;
      when S_002_001 =>
        i_21_next <= std_logic_vector(unsigned(i_reg) + unsigned(CNST_1(7 downto 0)));
        D_1372_21_next <= CNST_7(31 downto 0);
        temp_0_21_next(7 downto 0) <= temp_reg;
        D_1368_21_next(31 downto 8) <= (others => '0');
        D_1368_21_next(7 downto 0) <= inp;
        D_1369_21_next(31 downto 8) <= (others => '0');
        D_1369_21_next(7 downto 0) <= i_reg;
        D_1369_22_next(31 downto 8) <= (others => '0');
        D_1369_22_next(7 downto 0) <= i_reg;
        i_next <= i_21_next (7 downto 0);
        D_1370_21_next <= shrv5(D_1368_21_next , D_1369_21_next , '1');
        D_1372_22_next <= std_logic_vector(signed(D_1372_21_next ) - signed(D_1369_22_next (31 downto 0)));
        D_1371_21_next <= D_1370_21_next  and CNST_1(31 downto 0);
        D_1373_21_next <= shlv5(D_1371_21_next , D_1372_22_next );
        D_1374_21_next <= D_1373_21_next (7 downto 0);
        D_1376_21_next <= D_1374_21_next  or temp_0_21_next (7 downto 0);
        temp_21_next(7 downto 0) <= D_1376_21_next ;
        temp_next <= temp_21_next (7 downto 0);
        next_state <= S_003_001; --
      when S_003_001 =>        --
        if (i_reg <= CNST_7(7 downto 0)) then
          next_state <= S_002_001;
        else
          next_state <= S_004_001;
        end if;
      when S_004_001 =>
        D_1377_next <= temp_reg(7 downto 0);
        next_state <= S_EXIT; --
      when S_EXIT =>        --
        done <= '1';
        next_state <= S_ENTRY;
      when others =>
        next_state <= S_ENTRY;
    end case;
  end process;

  D_1377 <= D_1377_reg;

end fsmd;
