-- File automatically generated by "cdfg2hdl".
-- Filename: popcount.vhd
-- Date: 24 October 2013 06:07:45 PM
-- Author: Nikolaos Kavvadias (C) 2009, 2010, 2011, 2012, 2013

library IEEE;
use WORK.operpack.all;
use WORK.popcount_cdt_pkg.all;
use WORK.std_logic_1164_tinyadditions.all;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;


entity popcount is
  port (
    clk : in std_logic;
    reset : in std_logic;
    start : in std_logic;
    inp : in std_logic_vector(31 downto 0);
    D_1236 : out std_logic_vector(31 downto 0);
    done : out std_logic;
    ready : out std_logic
  );
end popcount;

architecture fsmd of popcount is
  type state_type is (S_ENTRY, S_EXIT, S_001_001, S_001_002, S_001_003, S_001_004, S_001_005, S_002_001, S_002_002, S_002_003, S_002_004, S_002_005, S_002_006, S_003_001, S_004_001);
  signal current_state, next_state: state_type;
  signal count_3_next : std_logic_vector(31 downto 0);
  signal count_3_reg : std_logic_vector(31 downto 0);
  signal count_3_eval : std_logic_vector(31 downto 0);
  signal D_1235_3_next : std_logic_vector(31 downto 0);
  signal D_1235_3_reg : std_logic_vector(31 downto 0);
  signal D_1235_3_eval : std_logic_vector(31 downto 0);
  signal count_1_next : std_logic_vector(31 downto 0);
  signal count_1_reg : std_logic_vector(31 downto 0);
  signal count_1_eval : std_logic_vector(31 downto 0);
  signal data_1_next : std_logic_vector(31 downto 0);
  signal data_1_reg : std_logic_vector(31 downto 0);
  signal data_1_eval : std_logic_vector(31 downto 0);
  signal data_4_next : std_logic_vector(31 downto 0);
  signal data_4_reg : std_logic_vector(31 downto 0);
  signal data_4_eval : std_logic_vector(31 downto 0);
  signal count_4_next : std_logic_vector(31 downto 0);
  signal count_4_reg : std_logic_vector(31 downto 0);
  signal count_4_eval : std_logic_vector(31 downto 0);
  signal data_3_next : std_logic_vector(31 downto 0);
  signal data_3_reg : std_logic_vector(31 downto 0);
  signal data_3_eval : std_logic_vector(31 downto 0);
  signal D_1236_next : std_logic_vector(31 downto 0);
  signal D_1236_reg : std_logic_vector(31 downto 0);
  signal D_1236_eval : std_logic_vector(31 downto 0);
  constant CNST_0 : std_logic_vector(63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
  constant CNST_1 : std_logic_vector(63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
begin
  -- current state logic
  process (clk, reset)
  begin
    if (reset = '1') then
      current_state <= S_ENTRY;
      count_3_reg <= (others => '0');
      D_1235_3_reg <= (others => '0');
      count_1_reg <= (others => '0');
      data_1_reg <= (others => '0');
      data_4_reg <= (others => '0');
      count_4_reg <= (others => '0');
      data_3_reg <= (others => '0');
      D_1236_reg <= (others => '0');
    elsif (clk = '1' and clk'EVENT) then
      current_state <= next_state;
      count_3_reg <= count_3_next;
      D_1235_3_reg <= D_1235_3_next;
      count_1_reg <= count_1_next;
      data_1_reg <= data_1_next;
      data_4_reg <= data_4_next;
      count_4_reg <= count_4_next;
      data_3_reg <= data_3_next;
      D_1236_reg <= D_1236_next;
    end if;
  end process;

  -- next state and output logic
  process (current_state, start,
    inp,
    D_1236_reg,
    count_3_reg, count_3_next,
    D_1235_3_reg, D_1235_3_next,
    count_1_reg, count_1_next,
    data_1_reg, data_1_next,
    data_4_reg, data_4_next,
    count_4_reg, count_4_next,
    data_3_reg, data_3_next
  )
  begin
    done <= '0';
    ready <= '0';
    count_3_next <= count_3_reg;
    D_1235_3_next <= D_1235_3_reg;
    count_1_next <= count_1_reg;
    data_1_next <= data_1_reg;
    data_4_next <= data_4_reg;
    count_4_next <= count_4_reg;
    data_3_next <= data_3_reg;
    D_1236_next <= D_1236_reg;
    case current_state is
      when S_ENTRY =>
        ready <= '1';
        if (start = '1') then
          next_state <= S_001_001;
        else
          next_state <= S_ENTRY;
        end if;
      when S_001_001 =>
        data_1_next <= inp(31 downto 0);
        next_state <= S_001_002;
      when S_001_002 =>
        count_1_next <= CNST_0(31 downto 0);
        next_state <= S_001_003;
      when S_001_003 =>
        data_4_next <= data_1_reg(31 downto 0);
        next_state <= S_001_004;
      when S_001_004 =>
        count_4_next <= count_1_reg(31 downto 0);
        next_state <= S_001_005;
      when S_001_005 =>
        next_state <= S_003_001;
      when S_002_001 =>
        D_1235_3_next <= data_4_reg and CNST_1(31 downto 0);
        next_state <= S_002_002;
      when S_002_002 =>
        count_3_next <= std_logic_vector(signed(D_1235_3_reg) + signed(count_4_reg(31 downto 0)));
        next_state <= S_002_003;
      when S_002_003 =>
        data_3_next(31 downto 31) <= (others => data_4_reg(31));
        data_3_next(30 downto 0) <= data_4_reg(31 downto 1);
        next_state <= S_002_004;
      when S_002_004 =>
        data_4_next <= data_3_reg(31 downto 0);
        next_state <= S_002_005;
      when S_002_005 =>
        count_4_next <= count_3_reg(31 downto 0);
        next_state <= S_002_006;
      when S_002_006 =>
        next_state <= S_003_001;
      when S_003_001 =>
        if (signed(data_4_reg) /= signed(CNST_0(31 downto 0))) then
          next_state <= S_002_001;
        else
          next_state <= S_004_001;
        end if;
      when S_004_001 =>
        D_1236_next <= count_4_reg(31 downto 0);
        next_state <= S_EXIT;
      when S_EXIT =>
        done <= '1';
        next_state <= S_ENTRY;
      when others =>
        next_state <= S_ENTRY;
    end case;
  end process;

  D_1236 <= D_1236_reg;

end fsmd;
