-- File automatically generated by "cdfg2hdl".
-- Filename: fibo.vhd
-- Date: 31 May 2013 12:18:43 PM
-- Author: Nikolaos Kavvadias (C) 2009, 2010, 2011, 2012, 2013

library IEEE;
use WORK.operpack.all;
use WORK.fibo_cdt_pkg.all;
use WORK.std_logic_1164_tinyadditions.all;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;


entity fibo is
  port (
    clk : in std_logic;
    reset : in std_logic;
    start : in std_logic;
    n : in std_logic_vector(31 downto 0);
    outp : out std_logic_vector(31 downto 0);
    done : out std_logic;
    ready : out std_logic
  );
end fibo;

architecture fsmd of fibo is
  type state_type is (S_ENTRY, S_EXIT, S_001_001, S_001_002, S_001_003, S_001_004, S_002_001, S_002_002, S_002_003, S_003_001, S_003_002, S_003_003, S_004_001, S_004_002, S_004_003, S_004_004, S_005_001);
  signal current_state, next_state: state_type;
  signal f_41_next : std_logic_vector(31 downto 0);
  signal f_41_reg : std_logic_vector(31 downto 0);
  signal f_41_eval : std_logic_vector(31 downto 0);
  signal k_41_next : std_logic_vector(31 downto 0);
  signal k_41_reg : std_logic_vector(31 downto 0);
  signal k_41_eval : std_logic_vector(31 downto 0);
  signal k_31_next : std_logic_vector(31 downto 0);
  signal k_31_reg : std_logic_vector(31 downto 0);
  signal k_31_eval : std_logic_vector(31 downto 0);
  signal f0_11_next : std_logic_vector(31 downto 0);
  signal f0_11_reg : std_logic_vector(31 downto 0);
  signal f0_11_eval : std_logic_vector(31 downto 0);
  signal f1_11_next : std_logic_vector(31 downto 0);
  signal f1_11_reg : std_logic_vector(31 downto 0);
  signal f1_11_eval : std_logic_vector(31 downto 0);
  signal x_11_next : std_logic_vector(31 downto 0);
  signal x_11_reg : std_logic_vector(31 downto 0);
  signal x_11_eval : std_logic_vector(31 downto 0);
  signal res_next : std_logic_vector(31 downto 0);
  signal res_reg : std_logic_vector(31 downto 0);
  signal res_eval : std_logic_vector(31 downto 0);
  signal k_next : std_logic_vector(31 downto 0);
  signal k_reg : std_logic_vector(31 downto 0);
  signal k_eval : std_logic_vector(31 downto 0);
  signal f0_41_next : std_logic_vector(31 downto 0);
  signal f0_41_reg : std_logic_vector(31 downto 0);
  signal f0_41_eval : std_logic_vector(31 downto 0);
  signal f1_41_next : std_logic_vector(31 downto 0);
  signal f1_41_reg : std_logic_vector(31 downto 0);
  signal f1_41_eval : std_logic_vector(31 downto 0);
  signal res_41_next : std_logic_vector(31 downto 0);
  signal res_41_reg : std_logic_vector(31 downto 0);
  signal res_41_eval : std_logic_vector(31 downto 0);
  signal f0_next : std_logic_vector(31 downto 0);
  signal f0_reg : std_logic_vector(31 downto 0);
  signal f0_eval : std_logic_vector(31 downto 0);
  signal f1_next : std_logic_vector(31 downto 0);
  signal f1_reg : std_logic_vector(31 downto 0);
  signal f1_eval : std_logic_vector(31 downto 0);
  signal res_11_next : std_logic_vector(31 downto 0);
  signal res_11_reg : std_logic_vector(31 downto 0);
  signal res_11_eval : std_logic_vector(31 downto 0);
  signal x_next : std_logic_vector(31 downto 0);
  signal x_reg : std_logic_vector(31 downto 0);
  signal x_eval : std_logic_vector(31 downto 0);
  signal res_21_next : std_logic_vector(31 downto 0);
  signal res_21_reg : std_logic_vector(31 downto 0);
  signal res_21_eval : std_logic_vector(31 downto 0);
  signal outp_next : std_logic_vector(31 downto 0);
  signal outp_reg : std_logic_vector(31 downto 0);
  signal outp_eval : std_logic_vector(31 downto 0);
  constant CNST_0 : std_logic_vector(63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
  constant CNST_1 : std_logic_vector(63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
  constant CNST_2 : std_logic_vector(63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
begin
  -- current state logic
  process (clk, reset)
  begin
    if (reset = '1') then
      current_state <= S_ENTRY;
      f_41_reg <= (others => '0');
      k_41_reg <= (others => '0');
      k_31_reg <= (others => '0');
      f0_11_reg <= (others => '0');
      f1_11_reg <= (others => '0');
      x_11_reg <= (others => '0');
      res_reg <= (others => '0');
      k_reg <= (others => '0');
      f0_41_reg <= (others => '0');
      f1_41_reg <= (others => '0');
      res_41_reg <= (others => '0');
      f0_reg <= (others => '0');
      f1_reg <= (others => '0');
      res_11_reg <= (others => '0');
      x_reg <= (others => '0');
      res_21_reg <= (others => '0');
      outp_reg <= (others => '0');
    elsif (clk = '1' and clk'EVENT) then
      current_state <= next_state;
      f_41_reg <= f_41_next;
      k_41_reg <= k_41_next;
      k_31_reg <= k_31_next;
      f0_11_reg <= f0_11_next;
      f1_11_reg <= f1_11_next;
      x_11_reg <= x_11_next;
      res_reg <= res_next;
      k_reg <= k_next;
      f0_41_reg <= f0_41_next;
      f1_41_reg <= f1_41_next;
      res_41_reg <= res_41_next;
      f0_reg <= f0_next;
      f1_reg <= f1_next;
      res_11_reg <= res_11_next;
      x_reg <= x_next;
      res_21_reg <= res_21_next;
      outp_reg <= outp_next;
    end if;
  end process;

  -- next state and output logic
  process (current_state, start,
    n,
    outp_reg,
    f_41_reg, f_41_next,
    k_41_reg, k_41_next,
    k_31_reg, k_31_next,
    f0_11_reg, f0_11_next,
    f1_11_reg, f1_11_next,
    x_11_reg, x_11_next,
    res_reg, res_next,
    k_reg, k_next,
    f0_41_reg, f0_41_next,
    f1_41_reg, f1_41_next,
    res_41_reg, res_41_next,
    f0_reg, f0_next,
    f1_reg, f1_next,
    res_11_reg, res_11_next,
    x_reg, x_next,
    res_21_reg, res_21_next
  )
  begin
    done <= '0';
    ready <= '0';
    f_41_next <= f_41_reg;
    k_41_next <= k_41_reg;
    k_31_next <= k_31_reg;
    f0_11_next <= f0_11_reg;
    f1_11_next <= f1_11_reg;
    x_11_next <= x_11_reg;
    res_next <= res_reg;
    k_next <= k_reg;
    f0_41_next <= f0_41_reg;
    f1_41_next <= f1_41_reg;
    res_41_next <= res_41_reg;
    f0_next <= f0_reg;
    f1_next <= f1_reg;
    res_11_next <= res_11_reg;
    x_next <= x_reg;
    res_21_next <= res_21_reg;
    outp_next <= outp_reg;
    case current_state is
      when S_ENTRY =>
        ready <= '1';
        if (start = '1') then
          next_state <= S_001_001;
        else
          next_state <= S_ENTRY;
        end if;
      when S_001_001 =>
        f0_11_next <= CNST_0(31 downto 0);
        f1_11_next <= CNST_1(31 downto 0);
        x_11_next <= n(31 downto 0);
        res_11_next <= f0_11_next (31 downto 0);
        x_next <= x_11_next (31 downto 0);
        f0_next <= f0_11_next (31 downto 0);
        f1_next <= f1_11_next (31 downto 0);
        res_next <= res_11_next (31 downto 0);
        if (x_11_next  <= CNST_0(31 downto 0)) then
          next_state <= S_005_001;
        else
          next_state <= S_002_001;
        end if;
      when S_002_001 =>
        res_21_next <= f1_reg(31 downto 0);
        res_next <= res_21_next (31 downto 0);
        if (x_reg = CNST_1(31 downto 0)) then
          next_state <= S_005_001;
        else
          next_state <= S_003_001;
        end if;
      when S_003_001 =>
        k_31_next <= CNST_2(31 downto 0);
        k_next <= k_31_next (31 downto 0);
        next_state <= S_004_001; --
      when S_004_001 =>        --
        f_41_next <= std_logic_vector(unsigned(f1_reg) + unsigned(f0_reg(31 downto 0)));
        k_41_next <= std_logic_vector(unsigned(k_reg) + unsigned(CNST_1(31 downto 0)));
        f0_41_next <= f1_reg(31 downto 0);
        f1_41_next <= f_41_next (31 downto 0);
        res_41_next <= f_41_next (31 downto 0);
        f0_next <= f0_41_next (31 downto 0);
        k_next <= k_41_next (31 downto 0);
        res_next <= res_41_next (31 downto 0);
        f1_next <= f1_41_next (31 downto 0);
        if (k_41_next  <= x_reg(31 downto 0)) then
          next_state <= S_004_001;
        else
          next_state <= S_005_001;
        end if;
      when S_005_001 =>
        outp_next <= res_reg(31 downto 0);
        next_state <= S_EXIT; --
      when S_EXIT =>        --
        done <= '1';
        next_state <= S_ENTRY;
      when others =>
        next_state <= S_ENTRY;
    end case;
  end process;

  outp <= outp_reg;

end fsmd;
